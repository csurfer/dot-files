# ls aliases
if [ `uname` == "Linux" ]; then
    alias l="ls"
    alias ls="ls --color"
    alias ll="ls -lh --color"
    alias la="ls -lA --color"
else
    alias l="ls"
    alias ls="ls -G"
    alias ll="ls -lhG"
    alias la="ls -lAG"
fi

# Safe file management aliases.
alias cp="cp -iv"
alias rm="rm -i"
alias mv="mv -i"

# Quick directory movement.
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

# tumx aliases.
alias tmux="tmux -2"
alias tma="tmux attach-session -t"

# History search.
alias grep="grep --color=auto"
# Searches the logged history.
hs () {
    grep -r $1 ~/.logs
}

# Git aliases.
alias g="git"
# Lists the branches which match the regex.
gb () {
    g branch --list $@
}
# Pretty prints the git log as a tree.
gl () {
    g log --pretty=format:"%h | %<(20)%an | %s"
}
# Gets the current git status.
gs () {
    g status
}

# Copy files with path.
copy_files () {
    # Check if the target information is provided.
    # This can be a directory on same system or a different system.
    if [ -z "$2" ]; then
        echo "[INFO] Rsync destination not specified."
        return
    fi
    # Fetch the files changed from git and rsync them to target.
    # Will ask for ssh auth if target is remote.
    if [ `uname` == "Linux" ]; then
        echo $1 | xargs -I % rsync -aRP % $2
    else
        echo $1 | xargs -J % rsync -aRP % $2
    fi
}

# Push changed git files using rsync.
push_git_files () {
    # Check if current directory is a git repository
    if [ ! -d .git ]; then
        echo "[INFO] Not a git repository."
        return
    fi
    # Check if the target information is provided.
    # This can be a directory on same system or a different system.
    if [ -z "$1" ]; then
        echo "[INFO] Rsync destination not specified."
        return
    fi
    # Fetch the files changed from git and rsync them to target.
    # Will ask for ssh auth if target is remote.
    if [ `uname` == "Linux" ]; then
        git status -s | awk "{print $2}" | xargs -I % rsync -aRP % $1
    else
        git status -s | awk "{print $2}" | xargs -J % rsync -aRP % $1
    fi
}
